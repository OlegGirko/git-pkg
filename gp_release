#!/bin/bash

# gp_release
# This is part of the Mer git-packaging suite

DISTRO=mer
pkg_branch=pkg-$DISTRO

ME=$(basename $0)

# http://stackoverflow.com/a/3879077/337649
require_clean_work_tree() {
    # Update the index
    git update-index -q --ignore-submodules --refresh
    err=0

    # Disallow unstaged changes in the working tree
    if ! git diff-files --quiet --ignore-submodules --
    then
        echo >&2 "cannot $1: you have unstaged changes."
        git diff-files --name-status -r --ignore-submodules -- >&2
        err=1
    fi

    # Disallow uncommitted changes in the index
    if ! git diff-index --cached --quiet HEAD --ignore-submodules --
    then
        echo >&2 "cannot $1: your index contains uncommitted changes."
        git diff-index --cached --name-status -r --ignore-submodules HEAD -- >&2
        err=1
    fi

    if [ $err = 1 ]
    then
        echo >&2 "Please commit or stash them before using gp_setup."
        exit 1
    fi
}

save_initial_branch() {
    initial_branch=$(git symbolic-ref HEAD)
    initial_branch=${initial_branch##refs/heads/}
}
assert_not_on_pkg_branch() {
    if [[ $initial_branch == "pkg-$DISTRO" ]]; then
	cat <<EOF
$ME must not be run from the pkg-$DISTRO branch. Maybe
git checkout -f master

EOF
	exit 1
    fi
}

switch_to_pkg(){
    git checkout -f pkg-$DISTRO || { echo "Can't checkout pkg-$DISTRO, aborting"; exit 1; }
}

update_changes(){ # release oldpatchtag patchtag
    release=$1
    tag1=$2
    tag2=$3
    changes=$(find . -maxdepth 1 -name '*changes' -print -quit)
    newchanges=$(mktemp changes_XXXXX)
    date +"* %a %b %Y ${GIT_AUTHOR_NAME:-Your Name (Set \$GIT_AUTHOR_NAME)} <${GIT_AUTHOR_EMAIL:-Your Email Set \$GIT_AUTHOR_EMAIL}> - $release" > $newchanges
    cat <<EOF >> $newchanges
- Please enter a changelog message

#### Relevant gitlog. This line and lines up to the next changelog entry will be removed.
EOF
    git log $tag1..$tag2  >> $newchanges
    echo "#### this line will be removed" >> $newchanges
    cat *.changes >> $newchanges
    $EDITOR $newchanges
    sed -i '/^### Relevant gitlog/,/^### this line will/d' $newchanges
    mv $newchanges $changes || exit 1
}

usage() {
    cat <<EOF
    $ME [--ver=<version-release>] [--edit]
 
       Used to create a new release or prepare for an intermediate
       build

       --ver=<version-release>

         if --ver is used to provide <version-release> then a new
         package version will be created.  Updates to _src, .changes,
         .yaml and .spec files are made. Version: / Release: values
         and Patches: lines will be updated in the yaml/spec. A
         changelog entry is prompted for (using git log as a base) and
         the git repo will be tagged.

         HEAD when the command is run will be tagged as
         $DISTRO-<version-release> and packaging as
         pkg-$DISTRO-<version-release>. (Usually git checkout -f
         master would be run before running $ME

       --edit

         If --edit is provided then the final commit/tag step on the
         packaging branch is not made so that the spec/yaml can be
         edited manually. The commit/tag commands are printed for
         reference.

       If --ver is not given then the packaging branch pkg-$DISTRO is
       checked out, the spec/yaml is updated by appending
       .gitcount.sha1 to the Release: value (this tries to ensure rpm
       release values increment in a manner that allow rpm upgrades to
       work).
       ADDITIONALLY: a normal gp_mkpkg is used to prepare the tarball
       and patches when --ver is not given.

       --git-dir=<dir>
         The --git-dir option is ideal for working with a local OBS
         checkout and doing local OBS builds. It makes most sense when
         --ver is not specified
         Internally it sets GIT_DIR to <dir> and GIT_WORK_TREE to cwd

       $DISTRO is set either in ~/.gitpkg, the GITPKG_DISTRO
       environment variable or using --distro=<DISTRO>. If not
       specified 'mer' is used.

EOF
}

do_release() {
    verrel_regex="^[^-]+-[^-]+$"
    #  or  "^[a-zA-Z0-9.~_]+-[a-zA-Z0-9.~_]+$" ?

    while [[ $1 ]]; do
	case $1 in
	    --ver* )
		verrel=${1#*=}
		if [[ $verrel =~ $verrel_regex ]]; then
		    ver=${verrel%-*}
		    rel=${verrel##*-}
		else
		    echo "The --ver= option must provide <ver>-<rel>"
		    exit 1
		fi
		shift ;;
	    --edit )
		manual_edit=true
		shift ;;
	    --git-dir=*)
		gitdir=${1#*=}
		if ! git  --git-dir $gitdir rev-parse --git-dir > /dev/null 2>&1; then
		    # not a git dir - try appending .git
		    if git --git-dir $gitdir/.git rev-parse --git-dir > /dev/null 2>&1; then
			gitdir=$gitdir/.git
		    else
			echo "The --git-dir option must point to a git repo."
			echo "  $gitdir nor $gitdir/.git are a git directory"
			exit 1
		    fi
		fi
		export GIT_WORK_TREE=$(pwd)
		export GIT_DIR=$gitdir
		export GIT_INDEX_FILE=$(mktemp /tmp/gp.index_XXXXX)
		git read-tree --empty
		shift ;;
	    * )
		echo "Error $1 not recognised"
		usage
		exit 1;;
	esac
    done

    git rev-parse --git-dir > /dev/null 2>&1 || {
	echo "This is not a git repository; use $ME in a gitpkg git repo or use --git-dir".
	exit 1
    }

    # We need a clean tree unless we're in another directory using --git-dir
    if ! [[ $GIT_INDEX_FILE ]]; then require_clean_work_tree; fi

    save_initial_branch
    assert_not_on_pkg_branch

    # store current git postion
    patchtag_sha1=$(git rev-parse HEAD)

    switch_to_pkg

    # Update _src
    IFS=: read type tarball basetag oldpatchtag rest < _src

    if [[ $verrel ]]; then
	patchtag=${DISTRO}-$verrel
    else
	patchtag=$patchtag_sha1
    fi
    echo ${type}:${tarball}:${basetag}:${patchtag} > _src

    # Update the yaml or spec (or abort)
    pkgfile=$(find . -maxdepth 1 -name '*yaml' -print -quit)
    if [[ ! $pkgfile ]]; then
	pkgfile=$(find . -maxdepth 1 -name '*spec' -print -quit)
    fi
    if [[ ! $pkgfile ]]; then
	print "No spec or yaml files found"
	exit 1
    fi

    if [[ $verrel ]]; then
	sed -i -e"s/Version:.*/Version: $ver/" $pkgfile
	sed -i -e"s/Release:.*/Release: $rel/" $pkgfile
	update_changes $verrel $oldpatchtag $patchtag_sha1
        # We need to tag source before running gp_mkpkg
	git tag $patchtag $patchtag_sha1

        # All done, use gp_mkpkg to update patch lists in yaml/spec etc
	gp_mkpkg --no-tarball --no-checkout

        # and commit
	if [[ $manual_edit ]]; then
	    git add -u .
	    cat <<EOF

The packaging has been prepared. You may now manally edit the
packaging.

When you are done, commit and tag the changes:

git commit -am"Release $patchtag"
git tag pkg-$patchtag
EOF
	else
	    git commit -am"Release $patchtag"
	    git tag pkg-$patchtag
	fi
    else
	sha1=$(git rev-parse --short $patchtag_sha1)
	gitcount=$(git rev-list ${basetag}..${patchtag} | wc -l)
	sed -i -re"s/Release:\s*(\S*)/Release: \1.$gitcount.$sha1/" $pkgfile
	# Now add a dummy changelog entry
	changes=$(find . -maxdepth 1 -name '*changes' -print -quit)
	newchanges=$(mktemp changes_XXXXX)
	date +"* %a %b %Y ${GIT_AUTHOR_NAME:-Your Name (Set \$GIT_AUTHOR_NAME)} <${GIT_AUTHOR_EMAIL:-Your Email Set \$GIT_AUTHOR_EMAIL}> - $release" > $newchanges
	echo -e "- git commits from $oldpatchtag to $sha1" >> $newchanges
	git log ${oldpatchtag}..$patchtag_sha1 --oneline | sed -e 's/^/   /' >> $newchanges
	echo >> $newchanges
	cat *.changes >> $newchanges
	mv $newchanges $changes || exit 1

        # All done, use gp_mkpkg to update patch lists in yaml/spec etc
	gp_mkpkg --no-checkout

	cat <<EOF
The tarball and patches have been prepared for building.
EOF
    fi
}

do_release $*
