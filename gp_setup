#!/bin/bash

# gp_setup
# This is part of the Mer git-packaging suite
# It sets up a git repo to use git-pkg

# If not
# Check if a mer-pkg exists already
# Create mer-pkg
# Add templates

pkg_branch=pkg-mer

[[ -d .git ]] || {
    echo "This is not a git repository; use gp_setup when you've cloned or created a normal src repo that is ready for packaging".
    exit 1
}

usage() {
    cat <<EOF
    gp_setup --pkg[=branch]
    gp_setup --existing [--pristine] --base=<tag>|--unpack=<tag> --pkgdir=<packaging dir> [--patch-branch=<branch/tag>]
 
       Used to setup an existing git repo for git-pkg

    --existing [--pristine] --base=<tag>|--unpack=<tag>
                --pkgdir=<packaging dir> [--patch-branch=<branch/tag>]
       Takes an existing set of packaging and applies it to some git repo.
       --base : Uses an existing/ upstream git at the given tag
       --unpack : Uses an empty git in conjuntion with --pristine;
                  unpacks the tarball as an initial comit and applies
                  the given tag to the unpacked tarball
       --pkgdir=<packaging dir> is the source of the spec/yaml/changes/patches
       --patch-branch=<patch-tag> is the id which will be used for the
         branch for the patches

       If --pristine is used then it looks in <packaging dir> for a
       tarball and uses that as the basis for the build.
       
    --pkg[=branch]
       Used in an existing git repo this creates a pkg branch with
       a suitable .gitignore and a _src file
       By default pkg-mer is created but alternatives can be used (eg pkg-suse11.4)

EOF
}
count_commits() {
    git rev-list $1..$2 | wc -l
}

# http://stackoverflow.com/a/3879077/337649
require_clean_work_tree () {
    # Update the index
    git update-index -q --ignore-submodules --refresh
    err=0

    # Disallow unstaged changes in the working tree
    if ! git diff-files --quiet --ignore-submodules --
    then
        echo >&2 "cannot $1: you have unstaged changes."
        git diff-files --name-status -r --ignore-submodules -- >&2
        err=1
    fi

    # Disallow uncommitted changes in the index
    if ! git diff-index --cached --quiet HEAD --ignore-submodules --
    then
        echo >&2 "cannot $1: your index contains uncommitted changes."
        git diff-index --cached --name-status -r --ignore-submodules HEAD -- >&2
        err=1
    fi

    if [ $err = 1 ]
    then
        echo >&2 "Please commit or stash them before using gp_setup."
        exit 1
    fi
}

unpack_tarball() {
    rm -rf *
    tar --transform 's_[^/]*/__' -xf $1
}

use_existing() {

    gp_type="git"
    unpack=
    FUZZ="--fuzz=2"
    # better option parsing welcomed
    # gp_setup --existing [--pristine] --base=<tag>|--unpack=<tag> --pkgdir=<packaging dir> [--patch-branch=<branch/tag>]

    while [[ $1 ]]; do
	case $1 in
	    --pristine* )
		gp_type="pristine-tar"
		shift ;;
	    --base* )
		tag=${1#*=}
		# if tag is empty, complain
		shift ;;
	    --unpack=* )
		# Would be nice to default to tag=version
		unpack=true
		tag=${1#*=}
		shift ;;
	    --pkgdir=* )
		pkgdir=${1#*=}
		echo "Looking in $pkgdir"
		shift ;;
	    --patch* )
		# Would be nice to default to tag=version-1
		pbranch=${1#*=}
		shift ;;
	    --fuzz=* )
		# patch application fuzz
		FUZZ="--fuzz=${1#*=}"
		shift ;;
	    * )
		echo "Error $1 not recognised"
		exit 1;;
	esac
    done

    [[ $tag ]] || { echo "tag not supplied"; exit 1; }
    [[ $pkgdir ]] || { echo "pkgdir not supplied"; exit 1; }

    [[ $gp_type == "pristine-tar" && ! $pbranch ]] && {
	echo "Error: pristine-tar requires a --patch-branch value"; exit 1; }

    # Somewhere to keep the patch info
    stash=$(mktemp -d)
    trap 'rm -rf "$stash"' EXIT

    if ! [[ -d .git ]]; then
	echo "This is not a git repository"
	exit 1
    fi

    # Verify there's only a single spec or yaml file.
    numspec=$(ls $pkgdir/*spec 2>/dev/null | wc -l)
    numyaml=$(ls $pkgdir/*yaml 2>/dev/null | wc -l)
    if [[ $numspec -gt 1 ]] || [[ $numyaml -gt 1 ]]; then
	echo "gp_setup doesn't support packaging with >1 .spec or .yaml file"
	exit 1
    fi

    # ... and record it
    specfile=$(cd $pkgdir; ls *.spec 2>/dev/null)
    yamlfile=$(cd $pkgdir; ls *.yaml 2>/dev/null)

    # Guess the tarball
    tarball=$(cd $pkgdir; find * -name *t*gz)
    [[ ! $tarball ]] && tarball=$(cd $pkgdir; find * -name *t*bz2)

    # If this is a pure pristine-tar with no git tree then just unpack
    # the tarball as a starting point
    if [[ $gp_type == "pristine-tar" && $unpack ]] ; then
	echo "Pristine tar : Unpacking tarball as initial commit"
	unpack_tarball $pkgdir/$tarball	
	git add .
	git commit -m"Initial commit from $tarball"
	# Create a tag for the tarball
	git tag $tag
    fi

    # Branch from the appropriate tag
    git checkout -f $tag
    if [[ $pbranch ]] ; then git checkout -b $pbranch; fi

    # Pristine tar approach needs some extra work
    # 1. Commit the tarball in packaging to pristine tar
    # 2. Replace the checked-out tree with the tarball
    # 3. Commit any deltas (empty if needed)
    # 4. Ready for patches
    if [[ $gp_type == "pristine-tar" ]] ; then
	echo "Pristine tar : removing all files and unpacking tarball to record any delta to $tag"
	pristine-tar commit $pkgdir/$tarball $tag
	unpack_tarball $pkgdir/$tarball	
	git add .; git ls-files --deleted | xargs --no-run-if-empty git rm
	git commit --allow-empty -m"pristine-tar-delta: Import any changes from the released tarball into the Mer source tree ready for local patches"
    fi

    # Apply the patches mentioned in the spec file in the order they appear
    # We'll probably need a --fuzz option at some point
    # Keep the dir clean and we should abort/warn when patches don't apply
    for patch in $(cd $pkgdir; grep Patch.*: *spec | cut -f2 -d:); do
	if [[ ! $pbranch ]] ; then echo "Error: No patch-tag supplied and patches found"; exit 1; fi
	
	echo Applying $patch
	if ! patch $FUZZ -p1 --no-backup-if-mismatch -s < $pkgdir/$patch; then
	    echo "Patch $pkgdir/$patch seemed to apply badly - fixup in a different terminal and press return to commit it and continue"
	    read dummy
	fi
	git commit -am"$(basename $patch .patch)"
	have_patches=1
    done

    if [[ $have_patches ]] ; then
        # Pristine tar needs to skip the pristine-tar-delta patch
	if [[ $gp_type == "pristine-tar" ]] ; then
	    tag1="${pbranch}~$(($(count_commits $tag $pbranch ) - 1))"
	else
	    tag1=$tag
	fi

	# Create the patchset and record the output for parsing
	git format-patch --find-renames --binary -N --no-numbered $tag1..$pbranch > $stash/patches
	count=1
	while read patch; do
            echo "Patch$((count++)): $patch" >> $stash/spec-Patch
	done < $stash/patches

	count=1
	while read patch; do
            echo "%patch$((count++)) -p1"  >> $stash/spec-patch
	done < $stash/patches

	echo "Patches:" > $stash/spec-yaml
	while read patch; do
            echo " - $patch" >> $stash/spec-yaml
	done < $stash/patches

        # We now have all we need to create the _src file so stash that away
	echo $gp_type:$tarball:$tag:$pbranch > $stash/_src
    else
	# No patches variant of _src
	echo $gp_type:$tarball:$tag > $stash/_src
    fi

    prepare_pkg_branch --quiet

    # Copy all the packaging files in (assuming no hidden files)
    cp $pkgdir/* .
    # Clean up the tarball we found and any patches which are now autogenerated
    rm $tarball
    rm -f *patch

    # Provide patch information for yaml/spec 
    if [[ -e $yamlfile ]]; then
        # We need update_yaml_patches
	[[ -e $stash/spec-yaml ]] && cat $stash/spec-yaml >> $yamlfile
	if [[ $gp_type != "pristine-tar" ]] ; then
	    echo "SetupOptions: -q -n src"  >> $yamlfile
	fi
	if [[ $have_patches ]] ; then
	    echo "Please edit/move the Patches section at the end of $yamlfile in another window and then press return"
	    read dummy
	fi
	# run spectacle and then edit .spec
	specify -N $yamlfile
    else
	if [[ $gp_type == "pristine-tar" ]] ; then
	    $gp_update_spec_patches < $specfile > $stash/$specfile
	else
	    $gp_update_spec_patches --setup_src < $specfile > $stash/$specfile
	fi
	mv $stash/$specfile $specfile
    fi

    # Everything else is normal packaging
    git add * >/dev/null 2>&1

    # And finally a commit
    git commit -m"Initial git package of $tag as $pbranch"

    # Tidy up
    rm -rf $stash

    # Comment on what we've created
    echo Guessed 
    cat _src
    echo for _src

    # and a reminder not to bitch *too* much
    echo "gp_setup --existing isn't thoroughly tested - please fix and/or report any bugs you find"
}

prepare_pkg_branch() {
    # Verify there's no packaging branch already
    if git show-ref --verify --quiet refs/heads/${pkg_branch}; then
	echo "${pkg_branch} branch exists already"
	exit 1
    fi

    require_clean_work_tree

    # This creates the orphaned pkg-* branch
    git checkout --orphan ${pkg_branch}
    git rm -q -rf .

    # Remove stray files that may have crept in
    rm -f *

    # We typically expect to be used in OBS/osc projects
    echo .osc > .gitignore
    if [[ -e $stash/_src ]]; then
	cp $stash/_src _src
    else
	touch _src
    fi
    git add _src .gitignore

    # If invoked internally then we 
    [[ $1 == "--quiet" ]] && return

    cat <<EOF
Now on ${pkg_branch} branch with _src and .gitignore.

You should create suitable packaging on this branch.

See https://wiki.merproject.org/wiki/Git_pkg for more help.

EOF

}

case $1 in
    --existing )
	shift
	use_existing $* ;;

    --pkg* )
	tag=${1#*=}
	prepare_pkg_branch ;;

    * )
	usage ;;
esac


